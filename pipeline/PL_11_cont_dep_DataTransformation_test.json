{
	"name": "PL_11_cont_dep_DataTransformation_test",
	"properties": {
		"activities": [
			{
				"name": "ForEachTransformationWithDependencies",
				"description": "Evaluates the NULL status in DtLogID and go in the case that matches.",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "ForEachTransformationwithDependencies_SynapseSP",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Lookup_Dt_Dependencies').output.value",
						"type": "Expression"
					},
					"isSequential": false,
					"activities": [
						{
							"name": "Lookup_Dt_DataSet_Output_Dependencies",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlDWSource",
									"sqlReaderStoredProcedureName": "[dbo].[sps_LookupDt_DataSet_DtOutput_segregation_test]",
									"storedProcedureParameters": {
										"DtDataSetId": {
											"type": "String",
											"value": {
												"value": "@item().DtDataSetId",
												"type": "Expression"
											}
										},
										"DtConfigId": {
											"type": "String",
											"value": {
												"value": "@item().DtConfigId",
												"type": "Expression"
											}
										},
										"ParentDtConfigId": {
											"type": "Int64",
											"value": {
												"value": "@item().ParentDtConfigId",
												"type": "Expression"
											}
										},
										"EntRunId": {
											"type": "String",
											"value": {
												"value": "@if(not(equals(item().DtLogId,NULL)),item().EntRunId,pipeline().parameters.EntRunId)",
												"type": "Expression"
											}
										},
										"DtRunId": {
											"type": "String",
											"value": {
												"value": "@if(not(equals(item().DtLogId,NULL)),item().DtRunId,pipeline().RunId)",
												"type": "Expression"
											}
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_SQLSYN_Configuration",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "DtMethod_Dependency",
							"description": "To perform the transformation:\nFirst check the conditions of the dependency are successfully (The lookup Dt_DataSet_Output_Dependencies not empty)\nThen check for the transformations that are still with: failed status, conditions not met or null  or new transformations (NULL in their LOG information\n",
							"type": "Switch",
							"dependsOn": [
								{
									"activity": "LookupFailedStatus_Dependencies",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"on": {
									"value": "@if(empty(activity('Lookup_Dt_DataSet_Output_Dependencies').output.value), 'SkipTransformation', if(OR(equals(activity('LookupFailedStatus_Dependencies').output.count,1), equals(item().DtLogId,NULL)), coalesce(item().DtMethod,'DataFlow'), 'SkipTransformation'))",
									"type": "Expression"
								},
								"cases": [
									{
										"value": "DataFlow",
										"activities": [
											{
												"name": "Execute PL_11 DataTransformation_Dataflow_copy1",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_11_1_DataTransformation_DataFlow_test",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"FunctionName": {
															"value": "@item().FunctionName",
															"type": "Expression"
														},
														"SinkPath": {
															"value": "@item().SinkPath",
															"type": "Expression"
														},
														"Output": {
															"value": "@activity('Lookup_Dt_DataSet_Output_Dependencies').output.value",
															"type": "Expression"
														},
														"DtDataSetId": {
															"value": "@item().DtDataSetId",
															"type": "Expression"
														},
														"OutputPath": {
															"value": "@item().OutputPath",
															"type": "Expression"
														},
														"PL_11_TriggerTime": {
															"value": "@pipeline().TriggerTime",
															"type": "Expression"
														},
														"LogOutputUpdateDate": {
															"value": "@item().OutputUpdateDate",
															"type": "Expression"
														},
														"DtLogId": {
															"value": "@item().DtLogId",
															"type": "Expression"
														},
														"FlagUpdateOutputDate": {
															"value": "@item().FlagUpdateOutputDate",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "DT_DeltaLakeTable_DF_Dependencies",
												"type": "DatabricksNotebook",
												"dependsOn": [
													{
														"activity": "Execute PL_11 DataTransformation_Dataflow_copy1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": "/Data Transformation/NB_Create_DeltaLake_Table",
													"baseParameters": {
														"SinkGlobalParameters": {
															"value": "@string(pipeline().globalParameters.SinkGlobalParameters)",
															"type": "Expression"
														},
														"DataTransformationParameters": {
															"value": "@string(item())",
															"type": "Expression"
														},
														"OutputParameters": {
															"value": "@string(activity('Lookup_Dt_DataSet_Output_Dependencies').output.value)",
															"type": "Expression"
														},
														"TriggerTime": {
															"value": "@formatDateTime(if(equals(item().DtLogId,NULL),pipeline().TriggerTime,item().OutputUpdateDate),'yyyy-MM-dd HH:mm:ss')",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_databricks",
													"type": "LinkedServiceReference"
												}
											}
										]
									},
									{
										"value": "Databricks",
										"activities": [
											{
												"name": "DT_Notebook_Dependencies",
												"type": "DatabricksNotebook",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": {
														"value": "@item().NotebookPath",
														"type": "Expression"
													},
													"baseParameters": {
														"SinkGlobalParameters": {
															"value": "@string(pipeline().globalParameters.SinkGlobalParameters)",
															"type": "Expression"
														},
														"DataTransformationParameters": {
															"value": "@string(item())",
															"type": "Expression"
														},
														"OutputParameters": {
															"value": "@string(activity('Lookup_Dt_DataSet_Output_Dependencies').output.value)",
															"type": "Expression"
														},
														"TriggerTime": {
															"value": "@formatDateTime(if(equals(item().DtLogId,NULL),pipeline().TriggerTime,item().OutputUpdateDate),'yyyy-MM-dd HH:mm:ss')",
															"type": "Expression"
														},
														"InputParameter": {
															"value": "@string(item().InputParameter)",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_databricks",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "spu_DtDsOutputUpdate_Dependencies_DataBricks",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "DT_Notebook_Dependencies",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[dbo].[spu_DtDsOutputUpdate]",
													"storedProcedureParameters": {
														"DtDataSetId": {
															"value": {
																"value": "@if(equals(item().DtLogId,NULL),item().DtDataSetId,\nif(equals(split(item().FlagUpdateOutputDate,';')[0],1),item().DtDataSetId,NULL))",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"DtOutputId": {
															"value": {
																"value": "@if(equals(item().DtLogId,NULL), if(equals(activity('Lookup_Dt_DataSet_Output_Dependencies').output.count, 0), NULL,activity('Lookup_Dt_DataSet_Output_Dependencies').output.value[0].DtOutputId),\r\nif(equals(split(item().FlagUpdateOutputDate,';')[0],1), if(equals(activity('Lookup_Dt_DataSet_Output_Dependencies').output.count, 0), NULL, activity('Lookup_Dt_DataSet_Output_Dependencies').output.value[0].DtOutputId),NULL))",
																"type": "Expression"
															},
															"type": "String"
														},
														"OutputUpdateDate": {
															"value": {
																"value": "@if(equals(item().DtLogId,NULL),pipeline().TriggerTime,\nif(equals(split(item().FlagUpdateOutputDate,';')[0],1),item().OutputUpdateDate,pipeline().TriggerTime))",
																"type": "Expression"
															},
															"type": "DateTime"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_SYN",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								]
							}
						},
						{
							"name": "sp_UpdateDtLogSuccess_Dependencies",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "DtMethod_Dependency",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[spu_DtLogUpdte]",
								"storedProcedureParameters": {
									"DtOutputId": {
										"value": {
											"value": "@if(OR(equals(activity('LookupFailedStatus_Dependencies').output.count,1), equals(item().DtLogId,NULL)), if(equals(activity('Lookup_Dt_DataSet_Output_Dependencies').output.count,0), item().DtDataSetId, activity('Lookup_Dt_DataSet_Output_Dependencies').output.value[0].DtOutputId), NULL)",
											"type": "Expression"
										},
										"type": "String"
									},
									"DtConfigId": {
										"value": {
											"value": "@item().DtConfigId",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"EntRunId": {
										"value": {
											"value": "@if(not(equals(item().DtLogId,NULL)),item().EntRunId,pipeline().parameters.EntRunId)",
											"type": "Expression"
										},
										"type": "String"
									},
									"DtRunId": {
										"value": {
											"value": "@if(not(equals(item().DtLogId,NULL)),item().DtRunId,pipeline().RunId)",
											"type": "Expression"
										},
										"type": "String"
									},
									"DtStatus": {
										"value": {
											"value": "@if(equals(activity('Lookup_Dt_DataSet_Output_Dependencies').output.count,0),'Conditions not met','Succeded')",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SYN",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "sp_UpdateDtLogFail_Dependencies",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "DtMethod_Dependency",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[spu_DtLogUpdte]",
								"storedProcedureParameters": {
									"DtOutputId": {
										"value": {
											"value": "@if(OR(equals(activity('LookupFailedStatus_Dependencies').output.count,1), equals(item().DtLogId,NULL)), \r\nif(equals(activity('Lookup_Dt_DataSet_Output_Dependencies').output.count, 0), NULL, activity('Lookup_Dt_DataSet_Output_Dependencies').output.value[0].DtOutputId), NULL)",
											"type": "Expression"
										},
										"type": "String"
									},
									"DtConfigId": {
										"value": {
											"value": "@item().DtConfigId",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"EntRunId": {
										"value": {
											"value": "@if(not(equals(item().DtLogId,NULL)),item().EntRunId,pipeline().parameters.EntRunId)",
											"type": "Expression"
										},
										"type": "String"
									},
									"DtRunId": {
										"value": {
											"value": "@if(not(equals(item().DtLogId,NULL)),item().DtRunId,pipeline().RunId)",
											"type": "Expression"
										},
										"type": "String"
									},
									"DtStatus": {
										"value": "Failed",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SYN",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "If Null Status-Failed Transformations_Dependencies",
							"description": "Check transformation output files that previously fail (DtLogId NOT NULL) with status of NULL ",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Lookup_Dt_DataSet_Output_Dependencies",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@and(not(equals(item().DtLogId,NULL)),equals(item().DtStatus,NULL))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "CheckOutputFiles_Dependencies",
										"type": "ExecutePipeline",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "PL_11_2_DataTransformation_CheckOutputFiles_test",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"FileTransformationName": {
													"value": "@activity('Lookup_Dt_DataSet_Output_Dependencies').output.value[0].FileTransformationName",
													"type": "Expression"
												},
												"TransformationPathGranularity": {
													"value": "@activity('Lookup_Dt_DataSet_Output_Dependencies').output.value[0].TransformationPathGranularity",
													"type": "Expression"
												},
												"FunctionName": {
													"value": "@item().FunctionName",
													"type": "Expression"
												},
												"OutputUpdateDate": {
													"value": "@item().OutputUpdateDate",
													"type": "Expression"
												},
												"DtOutputId": {
													"value": "@activity('Lookup_Dt_DataSet_Output_Dependencies').output.value[0].DtOutputId",
													"type": "Expression"
												},
												"DtConfigId": {
													"value": "@item().DtConfigId",
													"type": "Expression"
												},
												"EntRunId": {
													"value": "@item().EntRunId",
													"type": "Expression"
												},
												"DtRunId": {
													"value": "@item().DtRunId",
													"type": "Expression"
												}
											}
										}
									}
								]
							}
						},
						{
							"name": "LookupFailedStatus_Dependencies",
							"description": "Search for previous transformations with NULL status that their output files were not found in previous IF condition",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "If Null Status-Failed Transformations_Dependencies",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlDWSource",
									"sqlReaderQuery": {
										"value": "SELECT DISTINCT 1\nFROM [dbo].[DtLog_segregation_test]\nWHERE DtLogId IN (@{replace(coalesce(item().DtLogId,'NULL'),';',',')})\nAND (DtStatus IS NULL OR DtStatus IN('Failed','Conditions not met'))",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_SQLSYN_Configuration",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						}
					]
				}
			},
			{
				"name": "Lookup_Dt_Dependencies",
				"description": "Executes the SP ‘sps_ Lookup_Dt_DataSet_Output’ to read and returned to the ADF the last EntRunId of the current execution.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlDWSource",
						"sqlReaderStoredProcedureName": "[dbo].[sps_LookupDt_segregation_test]",
						"storedProcedureParameters": {
							"EntRunId": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.EntRunId",
									"type": "Expression"
								}
							},
							"TriggerName": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.TriggerName",
									"type": "Expression"
								}
							},
							"DependencyFlag": {
								"type": "Int16",
								"value": "1"
							},
							"PipelineTriggerTime": {
								"type": "Datetime",
								"value": {
									"value": "@formatDateTime(pipeline().TriggerTime,'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_SQLSYN_Configuration",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEachTransformationwithDependencies_SynapseSP",
				"description": "Iterates over a dataset and loop by number of rows it gets with the output from ‘Lookup_Dt_NoDependencies’ activity.",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Lookup_Dt_Dependencies",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Lookup_Dt_Dependencies').output.value",
						"type": "Expression"
					},
					"isSequential": false,
					"activities": [
						{
							"name": "If dtMethod equals SynapseSP_copy1",
							"description": "Check dtMethod equals \"SynapseSP\"",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "LookupFailedStatus_Dependencies_copy1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@if(empty(activity('Lookup_Dt_DataSet_Output_Dependencies_copy1').output.value), 'SkipTransformation', if(OR(equals(activity('LookupFailedStatus_Dependencies_copy1').output.count,1), equals(item().DtLogId,NULL)), equals(item().DtMethod, 'SynapseSP'), 'False'))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "sp_FillDtUpdateSuccess_SynapseSP_copy1",
										"description": "Update log table just for the Synapse SP that were executed with successful status",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "Execute_CustomSynapseSP_copy1",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[dbo].[spu_DtLogUpdte_segregation_test]",
											"storedProcedureParameters": {
												"DtOutputId": {
													"value": {
														"value": "NULL",
														"type": "Expression"
													},
													"type": "String"
												},
												"DtConfigId": {
													"value": {
														"value": "@item().DtConfigId",
														"type": "Expression"
													},
													"type": "Int64"
												},
												"EntRunId": {
													"value": {
														"value": "item().EntRunId,pipeline().parameters.EntRunId",
														"type": "Expression"
													},
													"type": "String"
												},
												"DtRunId": {
													"value": {
														"value": "item().DtRunId,pipeline().RunId",
														"type": "Expression"
													},
													"type": "String"
												},
												"DtStatus": {
													"value": "Succeded",
													"type": "String"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "LS_SYN",
											"type": "LinkedServiceReference"
										}
									},
									{
										"name": "sp_UpdateDtLogFail_SynapseSP_copy1",
										"description": "Update log table just for the Synapse SP that were executed with fail status.",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "Execute_CustomSynapseSP_copy1",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[dbo].[spu_DtLogUpdte_segregation_test]",
											"storedProcedureParameters": {
												"DtOutputId": {
													"value": {
														"value": "NULL",
														"type": "Expression"
													},
													"type": "String"
												},
												"DtConfigId": {
													"value": {
														"value": "@item().DtConfigId",
														"type": "Expression"
													},
													"type": "Int64"
												},
												"EntRunId": {
													"value": {
														"value": "item().EntRunId,pipeline().parameters.EntRunId",
														"type": "Expression"
													},
													"type": "String"
												},
												"DtRunId": {
													"value": {
														"value": "item().DtRunId,pipeline().RunId",
														"type": "Expression"
													},
													"type": "String"
												},
												"DtStatus": {
													"value": "Failed",
													"type": "String"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "LS_SYN",
											"type": "LinkedServiceReference"
										}
									},
									{
										"name": "Execute_CustomSynapseSP_copy1",
										"description": "Executes custom SP setup in DtConfig table.",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": {
												"value": "@item().FunctionName",
												"type": "Expression"
											}
										},
										"linkedServiceName": {
											"referenceName": "LS_SYN",
											"type": "LinkedServiceReference"
										}
									}
								]
							}
						},
						{
							"name": "Lookup_Dt_DataSet_Output_Dependencies_copy1",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlDWSource",
									"sqlReaderStoredProcedureName": "[dbo].[sps_LookupDt_DataSet_DtOutput_segregation_test]",
									"storedProcedureParameters": {
										"DtDataSetId": {
											"type": "String",
											"value": {
												"value": "@item().DtDataSetId",
												"type": "Expression"
											}
										},
										"DtConfigId": {
											"type": "String",
											"value": {
												"value": "@item().DtConfigId",
												"type": "Expression"
											}
										},
										"ParentDtConfigId": {
											"type": "Int64",
											"value": {
												"value": "@item().ParentDtConfigId",
												"type": "Expression"
											}
										},
										"EntRunId": {
											"type": "String",
											"value": {
												"value": "@if(not(equals(item().DtLogId,NULL)),item().EntRunId,pipeline().parameters.EntRunId)",
												"type": "Expression"
											}
										},
										"DtRunId": {
											"type": "String",
											"value": {
												"value": "@if(not(equals(item().DtLogId,NULL)),item().DtRunId,pipeline().RunId)",
												"type": "Expression"
											}
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_SQLSYN_Configuration",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "If Null Status-Failed Transformations_Dependencies_1",
							"description": "Check transformation output files that previously fail (DtLogId NOT NULL) with status of NULL ",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Lookup_Dt_DataSet_Output_Dependencies_copy1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@and(not(equals(item().DtLogId,NULL)),equals(item().DtStatus,NULL))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "CheckOutputFiles_Dependencies_copy1",
										"type": "ExecutePipeline",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "PL_11_2_DataTransformation_CheckOutputFiles_test",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"FileTransformationName": {
													"value": "@activity('Lookup_Dt_DataSet_Output_Dependencies_copy1').output.value[0].FileTransformationName",
													"type": "Expression"
												},
												"TransformationPathGranularity": {
													"value": "@activity('Lookup_Dt_DataSet_Output_Dependencies_copy1').output.value[0].TransformationPathGranularity",
													"type": "Expression"
												},
												"FunctionName": {
													"value": "@item().FunctionName",
													"type": "Expression"
												},
												"OutputUpdateDate": {
													"value": "@item().OutputUpdateDate",
													"type": "Expression"
												},
												"DtOutputId": {
													"value": "@activity('Lookup_Dt_DataSet_Output_Dependencies_copy1').output.value[0].DtOutputId",
													"type": "Expression"
												},
												"DtConfigId": {
													"value": "@item().DtConfigId",
													"type": "Expression"
												},
												"EntRunId": {
													"value": "@item().EntRunId",
													"type": "Expression"
												},
												"DtRunId": {
													"value": "@item().DtRunId",
													"type": "Expression"
												}
											}
										}
									}
								]
							}
						},
						{
							"name": "LookupFailedStatus_Dependencies_copy1",
							"description": "Search for previous transformations with NULL status that their output files were not found in previous IF condition",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "If Null Status-Failed Transformations_Dependencies_1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlDWSource",
									"sqlReaderQuery": {
										"value": "SELECT DISTINCT 1\nFROM [dbo].[DtLog_segregation_test]\nWHERE DtLogId IN (@{replace(coalesce(item().DtLogId,'NULL'),';',',')})\nAND (DtStatus IS NULL OR DtStatus IN('Failed','Conditions not met'))",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_SQLSYN_Configuration",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						}
					]
				}
			}
		],
		"parameters": {
			"EntRunId": {
				"type": "string"
			},
			"TriggerName": {
				"type": "string"
			}
		},
		"folder": {
			"name": "03 test Data Transformation Module"
		},
		"annotations": [],
		"lastPublishTime": "2022-05-20T07:34:37Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}