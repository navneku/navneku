{
	"name": "PL_14_FTPFullLoad",
	"properties": {
		"activities": [
			{
				"name": "If is FullLoad",
				"description": "Evaluates the ‘LoadType’ and go in case it matches.",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(pipeline().parameters.FwkItem['TypeLoad'], 1)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "FullLoad Copy into Landing",
							"description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "LookupSrcMaxValue",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "sp_AddtoWmk",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 2,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "ExcelSource",
									"additionalColumns": [
										{
											"name": "LastUpdate",
											"value": {
												"value": "@formatDateTime(pipeline().parameters.PL_01TriggerTime)",
												"type": "Expression"
											}
										},
										{
											"name": "CreatedBy",
											"value": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										}
									],
									"storeSettings": {
										"type": "SftpReadSettings",
										"recursive": true,
										"wildcardFolderPath": {
											"value": "@pipeline().parameters.SrcPath",
											"type": "Expression"
										},
										"wildcardFileName": {
											"value": "@pipeline().parameters.SrcObject",
											"type": "Expression"
										},
										"enablePartitionDiscovery": false,
										"disableChunking": false
									}
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings",
										"maxConcurrentConnections": {
											"value": "@pipeline().parameters.FwkItem['MaxConcurrency']",
											"type": "Expression"
										},
										"blockSizeInMB": {
											"value": "@pipeline().parameters.FwkItem['BlockSize']",
											"type": "Expression"
										}
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false,
								"parallelCopies": {
									"value": "@pipeline().parameters.FwkItem['DegreeOfParallelism']",
									"type": "Expression"
								},
								"enableSkipIncompatibleRow": true
							},
							"inputs": [
								{
									"referenceName": "DS_SFTP_Excel_Source",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "DS_ADLS_PRQ_Sink",
									"type": "DatasetReference",
									"parameters": {
										"FwkItem": {
											"value": "@pipeline().parameters.FwkItem",
											"type": "Expression"
										},
										"pipelineTriggerTime": {
											"value": "@pipeline().parameters.PL_01TriggerTime",
											"type": "Expression"
										},
										"FullPath": {
											"value": "@CONCAT('Raw', \n'/', pipeline().parameters.FwkItem['CountryId'],\n'/Full', \n'/', pipeline().parameters.FwkItem['SystemName'],\n'/', toUpper(pipeline().parameters.SrcObject),\n'/', if(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'YY'), formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'MM'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM')),\n\t\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'DD'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'dd')),\n\t\t\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'HH'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'HH')), '')))), \n'/', toUpper(pipeline().parameters.FwkItem['SchemaName']),\n'_', toUpper(pipeline().parameters.SrcObject),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'.parquet'\n)",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "sp_AddtoWmk",
							"description": "Executes the SP ‘spi_FwkWatermarkInsert’ to create watermark for the source object.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[spi_FwkWatermarkInsert]",
								"storedProcedureParameters": {
									"FwkConfigId": {
										"value": {
											"value": "@pipeline().parameters.FwkItem['FwkConfigId']",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"SrcObjectChild": {
										"value": {
											"value": "@pipeline().parameters.FwkItem['SrcObject']",
											"type": "Expression"
										},
										"type": "String"
									},
									"WmkDataType": {
										"value": {
											"value": "@pipeline().parameters.FwkItem['WmkDataType']",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"SrcObject": {
										"value": {
											"value": "@pipeline().parameters.FwkItem['SrcObject']",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SYN",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "LookupSrcMaxValue",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "SftpReadSettings",
										"recursive": true,
										"wildcardFolderPath": {
											"value": "@pipeline().parameters.SrcPath",
											"type": "Expression"
										},
										"wildcardFileName": {
											"value": "@pipeline().parameters.SrcObject",
											"type": "Expression"
										},
										"enablePartitionDiscovery": false,
										"disableChunking": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"dataset": {
									"referenceName": "DS_SFTP_Source",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "sp_UpdateFwkWatermark",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "FullLoad Copy into Landing",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[spu_FwkWatermarkFullUpdate]",
								"storedProcedureParameters": {
									"SrcObject": {
										"value": {
											"value": "@pipeline().parameters.FwkItem['SrcObject']",
											"type": "Expression"
										},
										"type": "String"
									},
									"SchemaName": {
										"value": {
											"value": "@pipeline().parameters.FwkItem['SchemaName']",
											"type": "Expression"
										},
										"type": "String"
									},
									"WmkDataType": {
										"value": {
											"value": "@pipeline().parameters.FwkItem['WmkDataType']",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"WmkColumnName": {
										"value": {
											"value": "@pipeline().parameters.FwkItem['WmkColumnName']",
											"type": "Expression"
										},
										"type": "String"
									},
									"SourceType": {
										"value": {
											"value": "@{pipeline().parameters.FwkItem['SourceType']}",
											"type": "Expression"
										},
										"type": "String"
									},
									"OldValueWmk": {
										"value": {
											"value": "1",
											"type": "Expression"
										},
										"type": "String"
									},
									"LastModifiedTime": {
										"value": {
											"value": "@formatdatetime(pipeline().parameters.PL_01TriggerTime)",
											"type": "Expression"
										},
										"type": "Datetime"
									},
									"ConvertPath": {
										"value": {
											"value": "@CONCAT('Processing', \n'/', pipeline().parameters.FwkItem['CountryId'],\n'/Full', \n'/', pipeline().parameters.FwkItem['SystemName'],\n'/', toUpper(pipeline().parameters.SrcObject),\n'/', if(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'YY'), formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'MM'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM')),\n\t\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'DD'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'dd')),\n\t\t\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'HH'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'HH')), '')))),\n'/'\n)",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SYN",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "FullLoad Copy into Published",
							"description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "spi_LogFwkCopyDataRowCount_Landing",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 2,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "ParquetSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": false,
										"enablePartitionDiscovery": false
									}
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false,
								"validateDataConsistency": true
							},
							"inputs": [
								{
									"referenceName": "DS_ADLS_PRQ_GET",
									"type": "DatasetReference",
									"parameters": {
										"FwkItem": {
											"value": "@pipeline().parameters.FwkItem",
											"type": "Expression"
										},
										"pipelineTriggerTime": {
											"value": "@pipeline().parameters.PL_01TriggerTime",
											"type": "Expression"
										},
										"FullPath": {
											"value": "@CONCAT('Raw', \n'/', pipeline().parameters.FwkItem['CountryId'],\n'/Full', \n'/', pipeline().parameters.FwkItem['SystemName'],\n'/', toUpper(pipeline().parameters.SrcObject),\n'/', if(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'YY'), formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'MM'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM')),\n\t\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'DD'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'dd')),\n\t\t\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'HH'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'HH')), '')))), \n'/', toUpper(pipeline().parameters.FwkItem['SchemaName']),\n'_', toUpper(pipeline().parameters.SrcObject),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'.parquet'\n)",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DS_ADLS_PRQ_Sink",
									"type": "DatasetReference",
									"parameters": {
										"FwkItem": {
											"value": "@pipeline().parameters.FwkItem",
											"type": "Expression"
										},
										"pipelineTriggerTime": {
											"value": "@pipeline().parameters.PL_01TriggerTime",
											"type": "Expression"
										},
										"FullPath": {
											"value": "@CONCAT('Published', \n'/', pipeline().parameters.FwkItem['CountryId'],\n'/Full', \n'/', pipeline().parameters.FwkItem['SystemName'],\n'/', toUpper(split(pipeline().parameters.SrcObject,'.')[0]),\n'/', if(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'YY'), formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'MM'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM')),\n\t\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'DD'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'dd')),\n\t\t\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'HH'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'HH')), '')))), \n'/', toUpper(pipeline().parameters.FwkItem['SchemaName']),\n'_', toUpper(split(pipeline().parameters.SrcObject,'.')[0]),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'.parquet'\n)",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "spi_LogFwkCopyDataRowCount_Landing",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "sp_UpdateFwkWatermark",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[spi_LogFwkCopyDataRowCount]",
								"storedProcedureParameters": {
									"SrcObject": {
										"value": {
											"value": "@pipeline().parameters.FwkItem['SrcObject']",
											"type": "Expression"
										},
										"type": "String"
									},
									"SourceType": {
										"value": {
											"value": "@{pipeline().parameters.FwkItem['SourceType']}",
											"type": "Expression"
										},
										"type": "String"
									},
									"RowsReadInt": {
										"value": {
											"value": "@activity('FullLoad Copy into Landing').output.rowsRead",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"RowsCopiedInt": {
										"value": {
											"value": "@activity('FullLoad Copy into Landing').output.rowsCopied",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"DataReadInt": {
										"value": {
											"value": "@activity('FullLoad Copy into Landing').output.dataRead",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"DataWrittenInt": {
										"value": {
											"value": "@activity('FullLoad Copy into Landing').output.dataWritten",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"LastModifiedTime": {
										"value": {
											"value": "@formatdatetime(pipeline().parameters.PL_01TriggerTime)",
											"type": "Expression"
										},
										"type": "Datetime"
									},
									"FilePath": {
										"value": {
											"value": "@CONCAT('Raw', \n'/', pipeline().parameters.FwkItem['CountryId'],\n'/Full', \n'/', pipeline().parameters.FwkItem['SystemName'],\n'/', toUpper(pipeline().parameters.SrcObject),\n'/', if(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'YY'), formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'MM'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM')),\n\t\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'DD'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'dd')),\n\t\t\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'HH'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'HH')), '')))),\n'/'\n)",
											"type": "Expression"
										},
										"type": "String"
									},
									"TriggerId": {
										"value": {
											"value": "@pipeline().TriggerId",
											"type": "Expression"
										},
										"type": "String"
									},
									"ActivityName": {
										"value": "FullLoad Copy into Landing",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SYN",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "spi_LogFwkCopyDataRowCount_Published",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "FullLoad Copy into Published",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[spi_LogFwkCopyDataRowCount]",
								"storedProcedureParameters": {
									"SrcObject": {
										"value": {
											"value": "@pipeline().parameters.FwkItem['SrcObject']",
											"type": "Expression"
										},
										"type": "String"
									},
									"SourceType": {
										"value": {
											"value": "@{pipeline().parameters.FwkItem['SourceType']}",
											"type": "Expression"
										},
										"type": "String"
									},
									"RowsReadInt": {
										"value": {
											"value": "@activity('FullLoad Copy into Landing').output.rowsRead",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"RowsCopiedInt": {
										"value": {
											"value": "@activity('FullLoad Copy into Landing').output.rowsCopied",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"DataReadInt": {
										"value": {
											"value": "@activity('FullLoad Copy into Landing').output.dataRead",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"DataWrittenInt": {
										"value": {
											"value": "@activity('FullLoad Copy into Landing').output.dataWritten",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"LastModifiedTime": {
										"value": {
											"value": "@formatdatetime(pipeline().parameters.PL_01TriggerTime)",
											"type": "Expression"
										},
										"type": "Datetime"
									},
									"FilePath": {
										"value": {
											"value": "@CONCAT('Published', \n'/', pipeline().parameters.FwkItem['CountryId'],\n'/Full', \n'/', pipeline().parameters.FwkItem['SystemName'],\n'/', toUpper(pipeline().parameters.SrcObject),\n'/', if(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'YY'), formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'MM'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM')),\n\t\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'DD'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'dd')),\n\t\t\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'HH'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'HH')), '')))),\n'/'\n)",
											"type": "Expression"
										},
										"type": "String"
									},
									"TriggerId": {
										"value": {
											"value": "@pipeline().TriggerId",
											"type": "Expression"
										},
										"type": "String"
									},
									"ActivityName": {
										"value": "FullLoad Copy into Published",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SYN",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "FullLoad Copy into Master",
							"description": "Copy a table from a database to the configurated Sink dynamically taking by input FwkItem, SrcPath.",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "spi_LogFwkCopyDataRowCount_Landing",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 2,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "ParquetSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": false,
										"enablePartitionDiscovery": false
									}
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false,
								"validateDataConsistency": true
							},
							"inputs": [
								{
									"referenceName": "DS_ADLS_PRQ_GET",
									"type": "DatasetReference",
									"parameters": {
										"FwkItem": {
											"value": "@pipeline().parameters.FwkItem",
											"type": "Expression"
										},
										"pipelineTriggerTime": {
											"value": "@pipeline().parameters.PL_01TriggerTime",
											"type": "Expression"
										},
										"FullPath": {
											"value": "@CONCAT('Raw', \n'/', pipeline().parameters.FwkItem['CountryId'],\n'/Full', \n'/', pipeline().parameters.FwkItem['SystemName'],\n'/', toUpper(pipeline().parameters.SrcObject),\n'/', if(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'YY'), formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'MM'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM')),\n\t\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'DD'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'dd')),\n\t\t\t\tif(equals(pipeline().parameters.FwkItem['SinkPathGranularity'],'HH'), CONCAT(formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'), '/', formatDateTime(pipeline().parameters.PL_01TriggerTime,'HH')), '')))), \n'/', toUpper(pipeline().parameters.FwkItem['SchemaName']),\n'_', toUpper(pipeline().parameters.SrcObject),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'yyyy'),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'MM'),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'dd'),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'HH'),\n'_', formatDateTime(pipeline().parameters.PL_01TriggerTime,'mm'),\n\t'.parquet'\n)",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DS_ADLS_PRQ_Sink",
									"type": "DatasetReference",
									"parameters": {
										"FwkItem": {
											"value": "@pipeline().parameters.FwkItem",
											"type": "Expression"
										},
										"pipelineTriggerTime": {
											"value": "@pipeline().parameters.PL_01TriggerTime",
											"type": "Expression"
										},
										"FullPath": {
											"value": "@CONCAT('Published', \n'/', pipeline().parameters.FwkItem['CountryId'],\n'/Master', \n'/', pipeline().parameters.FwkItem['SystemName'],\n'/', toUpper(split(pipeline().parameters.SrcObject,'.')[0]),\n'/', toUpper(pipeline().parameters.FwkItem['SchemaName']),\n'_', toUpper(split(pipeline().parameters.SrcObject,'.')[0]),\n\t'.parquet'\n)",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "spi_LogFwkCopyDataRowCount_Master",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "FullLoad Copy into Master",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[spi_LogFwkCopyDataRowCount]",
								"storedProcedureParameters": {
									"SrcObject": {
										"value": {
											"value": "@pipeline().parameters.FwkItem['SrcObject']",
											"type": "Expression"
										},
										"type": "String"
									},
									"SourceType": {
										"value": {
											"value": "@{pipeline().parameters.FwkItem['SourceType']}",
											"type": "Expression"
										},
										"type": "String"
									},
									"RowsReadInt": {
										"value": {
											"value": "@activity('FullLoad Copy into Landing').output.rowsRead",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"RowsCopiedInt": {
										"value": {
											"value": "@activity('FullLoad Copy into Landing').output.rowsCopied",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"DataReadInt": {
										"value": {
											"value": "@activity('FullLoad Copy into Landing').output.dataRead",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"DataWrittenInt": {
										"value": {
											"value": "@activity('FullLoad Copy into Landing').output.dataWritten",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"LastModifiedTime": {
										"value": {
											"value": "@formatdatetime(pipeline().parameters.PL_01TriggerTime)",
											"type": "Expression"
										},
										"type": "Datetime"
									},
									"FilePath": {
										"value": {
											"value": "@CONCAT('Published', \n'/', pipeline().parameters.FwkItem['CountryId'],\n'/Master', \n'/', pipeline().parameters.FwkItem['SystemName'],\n'/', toUpper(pipeline().parameters.SrcObject),\n'/'\n)",
											"type": "Expression"
										},
										"type": "String"
									},
									"TriggerId": {
										"value": {
											"value": "@pipeline().TriggerId",
											"type": "Expression"
										},
										"type": "String"
									},
									"ActivityName": {
										"value": "FullLoad Copy into Master",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SYN",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			}
		],
		"parameters": {
			"FwkItem": {
				"type": "array"
			},
			"PL_01TriggerTime": {
				"type": "string"
			},
			"FwkLogId": {
				"type": "string"
			},
			"EntRunId": {
				"type": "string"
			},
			"SrcPath": {
				"type": "string"
			},
			"SrcObject": {
				"type": "string"
			}
		},
		"folder": {
			"name": "01 Ingestion Module"
		},
		"annotations": [],
		"lastPublishTime": "2022-09-16T03:05:05Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}